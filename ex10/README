==================
=  Description:  =
==================

This purpose of this exercise is to practice the use and implementation of dynamic data 
structures, specifically, linked lists. Along the way, we also exercise using nested 
classes.

=============================
=  List of submitted files: =
=============================

README          				This file

ListUtil.java					This class contains static methods that operate on single-linked lists:
								
ListUtil methods:
mergeLists						Merges two sorted (in ascending order) lists into one new 
								sorted list in an ascending order. The resulting new list 
								is created using new nodes (copies of the nodes of the 
								given lists). Assumes both lists are sorted in ascending 
								order. The original lists should not be modified.
								O(m log n) is the time complexity of merging two sorted 
								arrays of size n and m, (given that n is always greater 
								than m).

containsCycle					Checks if the given list contains a cycle. A list contains 
								a cycle if at some point a Node in the list points to a 
								Node that already appeared in the list. Note that the cycle 
								does not necessarily contain all the nodes in the list. 
								The original list should not be modified.
								The time complexity is O(n).
								
reverse							Reverses the given list (so the head becomes the last element, 
								and every element points to the element that was previously 
								before it). Runs in O(n). No new object is created.	

isPalindrome 					Checks if the given list is a palindrome. A list is a 
								palindrome if for j=1...n/2 (where n is the number of elements 
								in the list) the element in location j equals to the 
								element in location n-j. Note that you should compare the 
								data stored in the nodes and not the node objects themselves. 
								The original list should not be modified.
								Time complexity is O(n).
 								
haveIntersection				Checks if the two given lists intersect. Two lists 
								intersect if at some point they start to share nodes. Once 
								two lists intersect they become one list from that point on 
								and can no longer split apart. Assumes that both lists does 
								not contain cycles. Note that two lists might intersect even 
								if their lengths are not equal. No new object is created, 
								and neither list is modified.
								Time complexity is O(n). 

mergeSort						Sorts the given list using the merge-sort algorithm. 
								Resulting list should be sorted in ascending order. 
								Resulting list should contain the same node objects it did 
								originally, and should be stable, i.e., nodes with equal 
								data should be in the same order they were in in the original 
								list. You may create a constant number of new to help sorting.
								Time complexity is O(nlog(n)).

SkipiList.java					This class represents a special kind of a doubly-linked 
								list of Strings, called a SkipiList. A SkipiList is 
								composed of Nodes (a nested class of SkipiList). 
								In addition to the data (String), each Node has one pointer 
								to the next Node in the list, and another pointer to the 
								prev-prev Node in the list (hence the name ''skipi''). 
								The only data members the class contains are the head and 
								the tail of the list.

SkipiList.Node					This class represents the node of the SkipiList.

															
======================
=  Special Comments  =
======================
